<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>slashd.ga</title>
    <link>http://slashd.ga/</link>
    <description>Recent content on slashd.ga</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru</language>
    <copyright>Valentin Shilnenkov</copyright>
    <lastBuildDate>Mon, 06 Aug 2018 22:22:10 +0300</lastBuildDate>
    
	<atom:link href="http://slashd.ga/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why Shellcode Doesn&#39;t Work on BusyBox</title>
      <link>http://slashd.ga/2018/08/why-shellcode-doesnt-work-on-busybox/</link>
      <pubDate>Mon, 06 Aug 2018 22:22:10 +0300</pubDate>
      
      <guid>http://slashd.ga/2018/08/why-shellcode-doesnt-work-on-busybox/</guid>
      <description>Why shellcode doesn&amp;rsquo;t work on busybox Is bad shellcode? I had a problem when was testing back-connect shellcode for ARM platform. I took shellcode from Azeria Lab and he didn&amp;rsquo;t work correctly. I had back-connect, but without any command execution. I was testing shellcode on Linux with BusyBox. Simply, /bin/sh is the link to /bin/busybox. So when I execute /bin/sh, instead starting /bin/busybox and determine which utily i run and execute it.</description>
    </item>
    
    <item>
      <title>IPhoneX 11.2.6 IOKit Inheritance</title>
      <link>http://slashd.ga/2018/03/iphonex-11.2.6-iokit-inheritance/</link>
      <pubDate>Wed, 14 Mar 2018 00:27:31 +0300</pubDate>
      
      <guid>http://slashd.ga/2018/03/iphonex-11.2.6-iokit-inheritance/</guid>
      <description>Наследование классов в IOKit Дендрограмма наследования классов для iPhoneX для версии iOS 11.2.6.</description>
    </item>
    
    <item>
      <title>Code Coverage</title>
      <link>http://slashd.ga/2017/09/code-coverage/</link>
      <pubDate>Sat, 23 Sep 2017 11:28:11 +0300</pubDate>
      
      <guid>http://slashd.ga/2017/09/code-coverage/</guid>
      <description>Введение Code coverage, или покрытие кода, это мера, используемая при тестировании программного обеспечения. Она показывает процент, насколько исходный код программы был протестирован (wikipedia). Code coverage удобно использовать как вспомогательный инструмент, чтобы понять какой код в данном случае исполнятеся. Для примера можно привести различные JavaScript-движки: JSC, ChakraCore, V8. В этой статье будут показаны примеры сборки JSC и ChakraCore с опцией покрытия кода и получения статистики с использованием компилятора clang.
Общие вопросы Сборка проекта Опции отвечающая за компиляцию проекта с покрытием кода:</description>
    </item>
    
  </channel>
</rss>